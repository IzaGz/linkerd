syntax = "proto3";

package io.buoyant.proto.namerd;

import "dtab.proto";

/**
 * A read-only interface (i.e. for interpreters in linkerd).
 */
service Interpreter {

  rpc Parse (ParseReq) returns (ParseRsp) {}
  
  rpc GetDtab (DtabReq) returns (DtabRsp) {}
  rpc StreamDtab (DtabReq) returns (stream DtabRsp) {}

  // rpc GetBoundTree (BindReq) returns (BoundTreeRsp) {}
  // rpc StreamBoundTree (BindReq) returns (stream BoundTreeRsp) {}

  // rpc GetAddr (AddrReq) returns (AddrRsp) {}
  // rpc StreamAddr (AddrReq) returns (stream AddrRsp) {}

  // rpc GetExplainedTree (ExplainTreeReq) returns (ExplainTreeRsp) {}
  // rpc StreamExplainedTree (ExplainTreeReq) returns (stream ExplainTreeRsp) {}

  // TODO GetNsList 
  // TODO StreamNsList 
}

/*
 * Parse -- parsing a DTAB from a string
 */

message ParseReq {
  string text = 1;
}

message ParseRsp {

  message Error {
    string description = 1;

    /** Offsets in bytes, if known. */
    uint32 location = 2;
  }

  oneof result {
    io.buoyant.proto.Dtab dtab = 1;
    Error error = 2;
  }
}

/*
 * GetDtab, StreamDtab
 */

message DtabReq {
  string ns = 1;
}

message VersionedDtab {
  message Version {
    bytes stamp = 1;
  }

  Version version = 1;
  io.buoyant.proto.Dtab dtab = 2;
}

message DtabRsp {

  message Error {
    enum Code {
      UNKNOWN = 0;
      NOT_FOUND = 1;
      BAD_REQUEST = 2;
    }

    string description = 1;
    Code code = 2;
  }

  oneof result {
    VersionedDtab dtab = 1;
    Error error = 2;
  }
}

//TODO
// service Controller {
// }
